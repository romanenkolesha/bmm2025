import tkinter as tk
from tkinter import ttk, StringVar, messagebox
from datetime import datetime
import json
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from collections import Counter
import calendar
import pandas as pd

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "emotions.json"

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏
EMOTIONS = {
    "–°—á–∞—Å—Ç—å–µ": {"desc": "–ß—É–≤—Å—Ç–≤–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è", "emoji": "üòä"},
    "–ì—Ä—É—Å—Ç—å": {"desc": "–û—â—É—â–µ–Ω–∏–µ –ø–µ—á–∞–ª–∏ –∏–ª–∏ —É—Ç—Ä–∞—Ç—ã", "emoji": "üò¢"},
    "–°—Ç—Ä–∞—Ö": {"desc": "–ß—É–≤—Å—Ç–≤–æ —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞", "emoji": "üò±"},
    "–ó–ª–æ—Å—Ç—å": {"desc": "–≠–º–æ—Ü–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–µ–π", "emoji": "üò°"},
    "–£–¥–∏–≤–ª–µ–Ω–∏–µ": {"desc": "–†–µ–∞–∫—Ü–∏—è –Ω–∞ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω–æ–µ", "emoji": "üò≤"},
    "–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ": {"desc": "–ß—É–≤—Å—Ç–≤–æ –Ω–µ–ø—Ä–∏—è–∑–Ω–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∏—è—Ç–∏—è", "emoji": "ü§¢"},
    "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": {"desc": "–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è", "emoji": "üßò"},
    "–í–æ–ª–Ω–µ–Ω–∏–µ": {"desc": "–°–º–µ—Å—å —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∏, —á–∞—Å—Ç–æ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏", "emoji": "üòÖ"},
    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": {"desc": "–ß—É–≤—Å—Ç–≤–æ –≤–µ—Ä—ã –≤ —Å–≤–æ–∏ —Å–∏–ª—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "emoji": "üí™"},
    "–ù–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ": {"desc": "–≠–º–æ—Ü–∏—è, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å —á–µ–º-—Ç–æ —Å–ª–æ–∂–Ω—ã–º –∏–ª–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–º", "emoji": "ü§î"}
}

# –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏
FONT_FAMILY = "Segoe UI"
FONT_SIZE_NORMAL = 12
FONT_SIZE_LARGE = 14
FONT_SIZE_HEADER = 16
COLOR_BG = "#F9FAFB"
COLOR_PRIMARY = "#3B82F6"
COLOR_BUTTON_BG = "#BFDBFE"
COLOR_BUTTON_HOVER = "#93C5FD"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
selected_date = None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —ç–º–æ—Ü–∏–∏ + –∑–∞–º–µ—Ç–∫–∏
def save_emotion():
    global selected_date, note_text
    emotion = combo_emotion.get()
    note = note_text.get("1.0", tk.END).strip()
    if not selected_date or not emotion:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ —ç–º–æ—Ü–∏—é.")
        return
    data = load_data()
    data[selected_date] = {"emotion": emotion, "note": note}
    save_data(data)
    update_calendar_view()
    clear_form()
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {selected_date} - {emotion}")

# –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
def clear_form():
    global selected_date, note_text
    selected_date = None
    combo_emotion.set("")
    label_selected_date.config(text="–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    description_var.set("")
    note_text.delete("1.0", tk.END)

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
class Tooltip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        widget.bind("<Enter>", self.show_tooltip)
        widget.bind("<Leave>", self.hide_tooltip)

    def show_tooltip(self, event=None):
        if self.tooltip_window or not self.text:
            return
        x = y = 0
        x = self.widget.winfo_pointerx() + 10
        y = self.widget.winfo_pointery() + 10
        self.tooltip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        tk.Label(tw, text=self.text, bg="yellow", font=(FONT_FAMILY, 10), padx=5, pady=2).pack()

    def hide_tooltip(self, event=None):
        if self.tooltip_window:
            self.tooltip_window.destroy()
            self.tooltip_window = None

# === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ ===
def create_calendar_grid(parent_frame):
    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                   "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    current_month = datetime.now().month
    current_year = datetime.now().year
    calendar_frame = tk.Frame(parent_frame, bg=COLOR_BG)
    calendar_frame.pack(pady=10)
    control_frame = tk.Frame(calendar_frame, bg=COLOR_BG)
    control_frame.grid(row=0, column=0, columnspan=7, sticky="ew")
    month_var = tk.IntVar(value=current_month)
    year_var = tk.IntVar(value=current_year)
    title_label = tk.Label(control_frame, text="", font=(FONT_FAMILY, FONT_SIZE_HEADER, "bold"), fg="black", bg=COLOR_BG)
    title_label.pack(side="top")

    def update_calendar_display():
        for widget in calendar_frame.winfo_children():
            if widget != control_frame:
                widget.destroy()
        month = month_var.get()
        year = year_var.get()
        title_label.config(text=f"{month_names[month - 1]} {year}")
        days_short = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        for i, day in enumerate(days_short):
            tk.Label(calendar_frame, text=day, font=(FONT_FAMILY, FONT_SIZE_NORMAL), fg="#555", bg=COLOR_BG).grid(
                row=1, column=i, pady=5)

        first_day, num_days = calendar.monthrange(year, month)
        first_day = (first_day + 1) % 7  # Monday is 0
        row, col = 2, first_day
        data = load_data()
        for day_num in range(1, num_days + 1):
            date_str = f"{year}-{str(month).zfill(2)}-{str(day_num).zfill(2)}"
            emoji = "‚ö™Ô∏è"
            emotion = ""
            note = ""
            if date_str in data:
                emotion = data[date_str]["emotion"]
                emoji = EMOTIONS.get(emotion, {}).get("emoji", "‚ùì")
                note = data[date_str].get("note", "")
            lbl = tk.Label(calendar_frame, text=emoji, font=("Arial", 24), width=4, height=2,
                           relief="groove", bg="white", cursor="hand2")
            lbl.grid(row=row, column=col, padx=4, pady=4)
            Tooltip(lbl, f"–î–∞—Ç–∞: {date_str}\n–≠–º–æ—Ü–∏—è: {emotion if emotion else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n–ó–∞–º–µ—Ç–∫–∞: {note if note else '–ù–µ—Ç –∑–∞–º–µ—Ç–∫–∏'}")

            def on_click(event, d=date_str):
                global selected_date
                selected_date = d
                label_selected_date.config(text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}")
                data = load_data()
                if d in data:
                    combo_emotion.set(data[d]["emotion"])
                    description_var.set(EMOTIONS.get(data[d]["emotion"], {}).get("desc", ""))
                    note_text.delete("1.0", tk.END)
                    note_text.insert(tk.END, data[d].get("note", ""))
                else:
                    combo_emotion.set("")
                    description_var.set("")
                    note_text.delete("1.0", tk.END)

            def on_shift_click(event, d=date_str):
                select_emoji_window(d)

            def handle_click(event, d=date_str):
                if event.state & 0x0001:  # Shift –Ω–∞–∂–∞—Ç
                    on_shift_click(event, d)
                else:
                    on_click(event, d)

            def on_double_click(event, d=date_str):
                if d in data:
                    if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–º–æ—Ü–∏—é –∑–∞ {d}?"):
                        del data[d]
                        save_data(data)
                        update_calendar_view()
                        print(f"–ó–∞–ø–∏—Å—å –∑–∞ {d} —É–¥–∞–ª–µ–Ω–∞")

            lbl.bind("<Button-1>", handle_click)
            lbl.bind("<Double-1>", on_double_click)
            col += 1
            if col > 6:
                col = 0
                row += 1

    def change_month(delta):
        new_month = month_var.get() + delta
        new_year = year_var.get()
        if new_month < 1:
            new_month = 12
            new_year -= 1
        elif new_month > 12:
            new_month = 1
            new_year += 1
        month_var.set(new_month)
        year_var.set(new_year)
        update_calendar_display()

    btn_prev = tk.Button(control_frame, text="‚¨Ö", command=lambda: change_month(-1),
                         font=(FONT_FAMILY, FONT_SIZE_NORMAL, "bold"),
                         bg=COLOR_BUTTON_BG, activebackground=COLOR_BUTTON_HOVER, bd=0, padx=10, pady=5)
    btn_next = tk.Button(control_frame, text="‚û°", command=lambda: change_month(1),
                         font=(FONT_FAMILY, FONT_SIZE_NORMAL, "bold"),
                         bg=COLOR_BUTTON_BG, activebackground=COLOR_BUTTON_HOVER, bd=0, padx=10, pady=5)
    btn_prev.pack(side="left")
    btn_next.pack(side="right")
    update_calendar_display()
    return calendar_frame

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_calendar_view():
    for widget in calendar_window_frame.winfo_children():
        widget.destroy()
    create_calendar_grid(calendar_window_frame)

# –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏
def select_emoji_window(date_str):
    emoji_window = tk.Toplevel(root)
    emoji_window.title(f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è {date_str}")
    emoji_window.geometry("400x250")
    emoji_window.grab_set()
    tk.Label(emoji_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏:", font=(FONT_FAMILY, FONT_SIZE_HEADER)).pack(pady=10)
    frame = tk.Frame(emoji_window)
    frame.pack()
    emojis_per_row = 5
    for idx, (emotion, info) in enumerate(EMOTIONS.items()):
        row = idx // emojis_per_row
        col = idx % emojis_per_row
        btn = tk.Button(frame, text=info["emoji"], font=("Arial", 18), width=3, height=1,
                        command=lambda e=emotion, d=date_str, w=emoji_window: apply_emoji(e, d, w))
        btn.grid(row=row, column=col, padx=5, pady=5)
    tk.Button(emoji_window, text="–û—Ç–º–µ–Ω–∞", fg="black", bg="white", command=emoji_window.destroy).pack(pady=10)

def apply_emoji(emotion, date_str, window):
    data = load_data()
    note = data.get(date_str, {}).get("note", "")
    data[date_str] = {"emotion": emotion, "note": note}
    save_data(data)
    update_calendar_view()
    window.destroy()
    print(f"–≠–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω—ë–Ω: {date_str} ‚Üí {emotion}")

# –ì—Ä–∞—Ñ–∏–∫–∏
def show_charts_with_pie():
    data = load_data()
    if not data:
        messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        return
    emotions = [info["emotion"] for info in data.values()]
    emotion_count = Counter(emotions)
    total = len(emotions)
    labels = list(emotion_count.keys())
    counts = list(emotion_count.values())
    percentages = [f"{(count / total * 100):.1f}%" for count in counts]
    colors = ['#FFD700', '#4682B4', '#9370DB', '#B22222', '#8A2BE2',
              '#556B2F', '#87CEEB', '#FFA500', '#2E8B57', '#A9A9A9']
    fig, axes = plt.subplots(1, 2, figsize=(16, 8))
    axes[0].bar(labels, counts, color=colors[:len(labels)], edgecolor='black', linewidth=1.2)
    axes[0].tick_params(axis='x', rotation=45, labelsize=10)
    axes[0].set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", fontsize=12)
    axes[0].set_xlabel("–≠–º–æ—Ü–∏–∏", fontsize=12)
    axes[0].grid(True, linestyle='--', alpha=0.6)
    wedges, texts = axes[1].pie(counts, startangle=90, colors=colors[:len(labels)],
                               wedgeprops=dict(width=0.4))
    axes[1].axis('equal')
    legend_labels = [f"{label}: {percent}" for label, percent in zip(labels, percentages)]
    axes[1].legend(wedges, legend_labels, title="–≠–º–æ—Ü–∏–∏", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
    plt.tight_layout()
    chart_window = tk.Toplevel(root)
    chart_window.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π")
    canvas = FigureCanvasTkAgg(fig, master=chart_window)
    canvas.draw()
    canvas.get_tk_widget().pack()

# –ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü
def show_month_analytics(month_str, year_str):
    try:
        month = int(month_str.split(" - ")[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
        year = int(year_str)
    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥")
        return
    data = load_data()
    if not data:
        messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    filtered = {}
    for date, info in data.items():
        y, m, d = date.split("-")
        if int(m) == month and int(y) == year:
            filtered[date] = info
    if not filtered:
        messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {month}.{year}")
        return
    emotions = [info["emotion"] for info in filtered.values()]
    emotion_count = Counter(emotions)
    top_emotion = max(emotion_count, key=emotion_count.get)
    analytics_window = tk.Toplevel(root)
    analytics_window.title(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {month}.{year}")
    tk.Label(analytics_window, text=f"–°–∞–º–∞—è —á–∞—Å—Ç–∞—è —ç–º–æ—Ü–∏—è –∑–∞ {month}.{year}:", font=(FONT_FAMILY, FONT_SIZE_HEADER)).pack(pady=10)
    tk.Label(analytics_window, text=top_emotion, font=(FONT_FAMILY, FONT_SIZE_LARGE, "bold")).pack(pady=10)
    for emotion, count in emotion_count.items():
        tk.Label(analytics_window, text=f"{emotion}: {count} —Ä–∞–∑", font=(FONT_FAMILY, FONT_SIZE_NORMAL)).pack()

# –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
def export_to_excel():
    data = load_data()
    if not data:
        return
    df = pd.DataFrame.from_dict(data, orient='index').reset_index()
    df.columns = ['–î–∞—Ç–∞', '–≠–º–æ—Ü–∏—è', '–ó–∞–º–µ—Ç–∫–∞']
    df.to_excel("emotions_export.xlsx", index=False)
    messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel.")

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –ò–ò —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ===
def generate_ai_prompt():
    try:
        df = pd.read_excel("emotions_export.xlsx")
    except FileNotFoundError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª Excel –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç.")
        return

    if df.empty:
        messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–§–∞–π–ª –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
    df['–ú–µ—Å—è—Ü'] = df['–î–∞—Ç–∞'].dt.to_period('M')

    total_days = len(df)
    emotion_counts = df['–≠–º–æ—Ü–∏—è'].value_counts()
    top_emotions = emotion_counts.head(3)
    emotion_percentages = (emotion_counts / total_days * 100).round(1)
    stress_days = df[df['–≠–º–æ—Ü–∏—è'].isin(['–°—Ç—Ä–∞—Ö', '–ó–ª–æ—Å—Ç—å', '–í–æ–ª–Ω–µ–Ω–∏–µ'])]
    stress_ratio = f"{len(stress_days)} –∏–∑ {total_days} –¥–Ω–µ–π ({len(stress_days)/total_days*100:.1f}%)"
    most_common_notes = df['–ó–∞–º–µ—Ç–∫–∞'].dropna().value_counts().head(3).index.tolist()

    prompt = (
        "–Ø —à–∫–æ–ª—å–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –∏ –≤—ë–ª –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π. –ù–∏–∂–µ ‚Äî –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {total_days} –¥–Ω–µ–π\n"
        f"üí• –¢–æ–ø-3 —ç–º–æ—Ü–∏–∏:\n"
        f"1. {top_emotions.index[0]} ‚Äî {top_emotions.iloc[0]} —Ä–∞–∑ ({emotion_percentages[top_emotions.index[0]]}%)\n"
        f"2. {top_emotions.index[1]} ‚Äî {top_emotions.iloc[1]} —Ä–∞–∑ ({emotion_percentages[top_emotions.index[1]]}%)\n"
        f"3. {top_emotions.index[2]} ‚Äî {top_emotions.iloc[2]} —Ä–∞–∑ ({emotion_percentages[top_emotions.index[2]]}%)\n\n"
        f"‚ö†Ô∏è –°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ –¥–Ω–∏ (—Å—Ç—Ä–∞—Ö, –∑–ª–æ—Å—Ç—å, –≤–æ–ª–Ω–µ–Ω–∏–µ): {stress_ratio}\n"
        f"üìù –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n"
        f"1. '{most_common_notes[0]}'\n"
        f"2. '{most_common_notes[1]}'\n"
        f"3. '{most_common_notes[2]}'\n\n"
        f"üìà –î–∏–Ω–∞–º–∏–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
    )

    monthly_trend = df.groupby('–ú–µ—Å—è—Ü')['–≠–º–æ—Ü–∏—è'].value_counts().unstack(fill_value=0)
    for month in monthly_trend.index:
        prompt += f"- {month}:\n"
        for emotion in monthly_trend.columns:
            count = monthly_trend.loc[month, emotion]
            if count > 0:
                prompt += f"  ‚Ä¢ {emotion}: {count} —Ä–∞–∑\n"

    prompt += (
        "\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. "
        "–û—Ü–µ–Ω–∏, –∫–∞–∫ —á–∞—Å—Ç–æ —è –∏—Å–ø—ã—Ç—ã–≤–∞—é —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏, "
        "–∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, "
        "–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "- –ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ—Å—Å–∞\n"
        "- –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ\n"
        "- –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n"
        "- –ö–∞–∫–∏–µ –¥–Ω–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ\n"
        "- –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )

    prompt_window = tk.Toplevel(root)
    prompt_window.title("AI –ü—Ä–æ–º—Ç —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
    prompt_window.geometry("800x600")

    text_area = tk.Text(prompt_window, wrap="word", font=(FONT_FAMILY, FONT_SIZE_NORMAL))
    text_area.pack(padx=10, pady=10, fill="both", expand=True)
    text_area.insert("1.0", prompt)

    def copy_to_clipboard():
        root.clipboard_clear()
        root.clipboard_append(prompt)
        messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–º—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    btn_copy = tk.Button(prompt_window, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä", command=copy_to_clipboard,
                         font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_PRIMARY, fg="black")
    btn_copy.pack(pady=5)

# === GUI ===
root = tk.Tk()
root.title("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —ç–º–æ—Ü–∏–π")
root.geometry("1200x900")
root.configure(bg=COLOR_BG)
style = ttk.Style()
style.configure("TButton", padding=6, relief="flat", background=COLOR_BUTTON_BG, font=(FONT_FAMILY, FONT_SIZE_NORMAL))
style.map("TButton", background=[('active', COLOR_BUTTON_HOVER)])

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
main_frame = tk.Frame(root, bg=COLOR_BG)
main_frame.pack(fill="both", expand=True, padx=20, pady=20)
left_frame = tk.Frame(main_frame, bg=COLOR_BG)
right_frame = tk.Frame(main_frame, bg=COLOR_BG)
left_frame.pack(side="left", fill="both", expand=False)
right_frame.pack(side="right", fill="both", expand=True)

# –ö—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
tooltip_text = (
    "–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?\n"
    "–≤—ã–±–µ—Ä–∏ —ç–º–æ–¥–∑–∏ ‚Äì shift + –∫–ª–∏–∫ –Ω–∞ –¥–µ–Ω—å \n"
    "—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äì –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫"
)
tooltip_label = tk.Label(left_frame, text=tooltip_text, font=(FONT_FAMILY, 18), fg="#333", bg="#F9FAFB", justify="left",
                         padx=10, pady=5, wraplength=400)
tooltip_label.pack(pady=10, fill="x")

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å
calendar_window_frame = tk.Frame(left_frame, bg=COLOR_BG)
calendar_window_frame.pack(pady=10)
update_calendar_view()

# --- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ---
tooltip_text = (
    "–ö–∞–∫ –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?\n"
    "1. –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å\n"
    "2. –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞\n"
    "3. –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å\n"
    "4. –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"
)
tooltip_label = tk.Label(right_frame, text=tooltip_text, font=(FONT_FAMILY, 18), fg="#333", bg="#F9FAFB", justify="left",
                         padx=10, pady=5, wraplength=400)
tooltip_label.pack(pady=10, fill="x")

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
label_selected_date = tk.Label(right_frame, text="–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", font=(FONT_FAMILY, FONT_SIZE_NORMAL), fg="blue",
                               bg=COLOR_BG)
label_selected_date.pack(pady=5)

# –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
tk.Label(right_frame, text="—Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π", font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_BG).pack()
combo_emotion = ttk.Combobox(right_frame, values=list(EMOTIONS.keys()), font=(FONT_FAMILY, FONT_SIZE_NORMAL))
combo_emotion.pack(pady=5)
description_var = StringVar()
label_description = tk.Label(right_frame, textvariable=description_var, wraplength=500, justify="left",
                             font=(FONT_FAMILY, FONT_SIZE_NORMAL), fg="#555", bg=COLOR_BG)
label_description.pack(pady=5)
combo_emotion.bind("<<ComboboxSelected>>", lambda e: description_var.set(
    EMOTIONS.get(combo_emotion.get(), {}).get("desc", "")))

# –ü–æ–ª–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
tk.Label(right_frame, text="–ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?", font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_BG).pack(pady=5)
note_text = tk.Text(right_frame, height=5, width=30, wrap="word", font=(FONT_FAMILY, FONT_SIZE_NORMAL))
note_text.pack(pady=5)

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
btn_save = tk.Button(right_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_emotion,
                     font=(FONT_FAMILY, FONT_SIZE_NORMAL, "bold"),
                     bg=COLOR_PRIMARY, fg="black", bd=0, padx=10, pady=6)
btn_save.pack(pady=10)

# –ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü
analytics_frame = tk.Frame(right_frame, bg=COLOR_BG)
analytics_frame.pack(pady=10)
month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
               "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
month_values = [f"{str(i + 1).zfill(2)} - {month_names[i]}" for i in range(12)]
combo_month = ttk.Combobox(analytics_frame, values=month_values, width=15, font=(FONT_FAMILY, FONT_SIZE_NORMAL))
current_month = datetime.now().month
combo_month.set(f"{str(current_month).zfill(2)} - {month_names[current_month - 1]}")
combo_month.pack(side="left", padx=5)
year_values = [str(year) for year in range(2020, 2031)]
combo_year = ttk.Combobox(analytics_frame, values=year_values, width=5, font=(FONT_FAMILY, FONT_SIZE_NORMAL))
combo_year.set(str(datetime.now().year))
combo_year.pack(side="left", padx=5)
btn_show_month_analytics = tk.Button(analytics_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
                                    command=lambda: show_month_analytics(combo_month.get(), combo_year.get()),
                                    font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_BUTTON_BG,
                                    activebackground=COLOR_BUTTON_HOVER, bd=0, padx=10, pady=5)
btn_show_month_analytics.pack(side="left", padx=5)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
btn_chart = tk.Button(right_frame, text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", command=show_charts_with_pie,
                      font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_BUTTON_BG,
                      activebackground=COLOR_BUTTON_HOVER, bd=0, padx=10, pady=5)
btn_chart.pack(pady=5)
btn_export = tk.Button(right_frame, text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=export_to_excel,
                       font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg=COLOR_BUTTON_BG,
                       activebackground=COLOR_BUTTON_HOVER, bd=0, padx=10, pady=5)
btn_export.pack(pady=5)

# === –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò ===
btn_ai_prompt = tk.Button(right_frame, text="ü§ñ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò",
                          command=generate_ai_prompt,
                          font=(FONT_FAMILY, FONT_SIZE_NORMAL), bg="#A855F7", fg="black", bd=0, padx=10, pady=5)
btn_ai_prompt.pack(pady=5)

# –ó–∞–ø—É—Å–∫
root.mainloop()